导入 pygame
导入 系统
 随机导入
来自 pygame。当地人 进口 *

#初始化
游戏。init ()         #初始化pygame
游戏。搅拌机。init ()   #初始化混音器

#制作窗口
playSurface  =  pygame。显示。set_mode (( 800 , 800 ))   #定义窗口大小
游戏。显示。set_caption ( "贪吃蛇" )   #定义标题

#添加音乐
游戏。搅拌机。音乐。load ( "贪吃蛇背景音乐.mp3" )
游戏。搅拌机。音乐。播放( - 1 )

    
#结束游戏
DEF  GAMEOVER（）：
    游戏。quit ()    #退出pygame窗口
    系统。exit ()       #退出程序
    

#颜色设置
蛇体颜色 =  pygame。颜色( 0 , 255 , 0 ) #绿色
食物颜色 =  pygame。颜色( 255 , 0 , 0 ) #红色


定义 主（）：

    time_clock  =  pygame。时间。Clock () #定义一个变量来控制速度
    
    #绘制蛇与数
    蛇头位置 = [ 200 , 200 ]                        #蛇头位置
    蛇身 = [[ 200 , 200 ],[ 180 , 200 ],[ 160 , 200 ]]     #蛇身位置
    foodPosition  = [ 500 , 500 ]         #编号位置
    foodTotal  =  1                    #数量
    foodNumber  =  1                   # 用于增加速度的变量
    direction  =  'right'              #最终方向
    changeDirection  =  #定义一个方向     的变量，方向

    speed  =  4   #定义最终速度

    而 真：
        对于 事件 的 pygame的。事件。get ():    #从中汲取事件

            #退出事件
            如果 事件。类型 == 退出：
                游戏。退出()
                系统。退出()

            #身边事件
            elif 事件。键入 ==  KEYDOWN：
                如果 事件。key  ==  K_RIGHT 或 event。键 ==  K_d：
                    changeDirection  =  '正确'

                如果 事件。键 ==  K_LEFT 或 事件。键 ==  K_a：
                    changeDirection  =  '左'
                    
                如果 事件。键 ==  K_UP 或 事件。键 ==  K_w：
                    changeDirection  =  '向上'
                    
                如果 事件。键 ==  K_DOWN 或 事件。键 ==  K_s：
                    changeDirection  =  '向下'

                如果 事件。键 ==  K_ESCAPE：
                    游戏。事件。发布（pygame。事件。事件（退出））

        #防止蛇反方向移动
        如果 changeDirection  ==  'right' 而 不是 direction  ==  'left'：
            方向 = 改变方向
            
        如果 changeDirection  ==  'left' 而 不是 direction  ==  'right'：
            方向 = 改变方向
            
        如果 changeDirection  ==  'up' 而 不是 direction  ==  'down'：
            方向 = 改变方向
            
        如果 changeDirection  ==  'down' 而 不是 direction  ==  'up'：
            方向 = 改变方向

        #根据方向移动蛇头
        如果 方向 ==  '正确'：
            蛇位置[ 0 ] +=  20
            
        如果 方向 ==  '左'：
            蛇位置[ 0 ] -=  20
            
        如果 方向 ==  '向上'：
            蛇位置[ 1 ] -=  20
            
        如果 方向 ==  '向下'：
            蛇位置[ 1 ] +=  20

        蛇体。insert ( 0 , list ( snakePosition ))   #增加蛇的长度
        
        #判断是否吃到食物
        如果 snakePosition [ 0 ] ==  foodPosition [ 0 ]和 snakePosition [ 1 ] ==  foodPosition [ 1 ]：
            食物总计 =  0
        其他：
            蛇体。pop ()   #每次将最后一个单位的蛇身清除列表

        #重新生成食物
        如果 foodTotal  ==  0：
            x  = 随机。随机数( 1 , 40 )
            y  = 随机。随机数( 1 , 40 )
            foodPosition  = [ int ( x * 20 ), int ( y * 20 )]
            食物总计 =  1
            食物编号 +=  1    
            
        #防止食物生成在蛇
        对于 身体 在 snakeBodys [ 1：]：
            如果 foodPosition [ 0 ] ==  body [ 0 ]和 foodPosition [ 1 ] ==  body [ 1 ]：
                食物总计 =  0
                食物编号 -= 1

        #设置递增速度
        如果 foodNumber  %  5  == 0：
            速度 +=  1
            食物编号 =  1
            
        #绘制游戏背景
        背景 =  pygame。图像。load ( "河海大学校标.jpg" )
        播放表面。blit (背景,( 0 , 0 ))
        游戏。显示。更新()

        #描绘蛇与数
        对于 在snakeBodys 中的位置 ： 
            游戏。画。rect ( playSurface , snakeBody_color , Rect ( position [ 0 ], position [ 1 ], 20 , 20 ))
            游戏。画。rect ( playSurface , food_color , Rect ( foodPosition [ 0 ], foodPosition [ 1 ], 20 , 20 ))

        游戏。显示。flip ()   #更新显示到屏幕表面

        #横向边框结束游戏
        如果 snakePosition [ 0 ] >  800 或 snakePosition [ 0 ] <  0：
            游戏结束()
            
        elif  snakePosition [ 1 ] >  800 或 snakePosition [ 1 ] <  0：
            游戏结束()
            
        #发生身体结束游戏
        对于 身体 在 snakeBodys [ 1：]：
            如果 snakePosition [ 0 ] ==  body [ 0 ]并且 snakePosition [ 1 ] ==  body [ 1 ]：
                游戏结束()

        #控制游戏速度
        时间时钟。滴答（速度）

        
#入口函数
如果 __name__  ==  "__main__"：
    主要（）
